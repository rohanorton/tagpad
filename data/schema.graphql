schema {
  query: Query
  mutation: Mutation
}

input AddItemInput {
  title: String!
  content: String!
  tags: String!
  clientMutationId: String!
}

type AddItemPayload {
  itemEdge: ItemEdge
  itemsList: ItemsList
  clientMutationId: String!
}

input DeleteItemInput {
  itemToDeleteId: String!
  clientMutationId: String!
}

type DeleteItemPayload {
  itemsList: ItemsList
  clientMutationId: String!
}

type Item {
  title: String
  content: String
  tags: String
  id: ID!
}

type ItemConnection {
  pageInfo: PageInfo!
  edges: [ItemEdge]
}

type ItemEdge {
  node: Item
  cursor: String!
}

type ItemsList {
  id: ID!
  items(title: String = "", after: String, first: Int, before: String, last: Int): ItemConnection
}

type Mutation {
  addItem(input: AddItemInput!): AddItemPayload
  updateItem(input: UpdateItemInput!): UpdateItemPayload
  deleteItem(input: DeleteItemInput!): DeleteItemPayload
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  item(id: String): Item
  itemsList(title: String): ItemsList
}

input UpdateItemInput {
  id: String!
  title: String!
  content: String!
  tags: String!
  clientMutationId: String!
}

type UpdateItemPayload {
  item: Item
  clientMutationId: String!
}
